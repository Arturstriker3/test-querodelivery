version: "3.8"

services:
  postgres:
    image: postgres:17
    container_name: container_postgres_database
    environment:
      POSTGRES_DB: generic
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: container_mongo_database
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: generic
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
    restart: on-failure
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  api-product:
    build:
      context: ./Product
      dockerfile: ./Dockerfile
    container_name: api_product_service
    environment:
      MONGO_URL: mongodb://admin:admin@container_mongo_database:27017/generic?authSource=admin
      SERVER_PORT: 4040
      API_NAME: "Product/Cart/Purchase Service"
      API_VERSION: "1.0.0"
      API_PREFIX: "/api/v1"
      JWT_SECRET: "1234567890123456789012345678querodelivery"
      NODE_ENV: production
    ports:
      - "4040:4040"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: on-failure

  api-user:
    build:
      context: ./User
      dockerfile: ./Dockerfile
    container_name: api_user_service
    environment:
      SERVER_PORT: 3030
      API_NAME: "User Service"
      API_VERSION: "1.0.0"
      API_PREFIX: "/api/v1"
      DB_HOST: container_postgres_database
      DB_PORT: 5432
      DB_USERNAME: admin
      DB_PASSWORD: admin
      DB_DATABASE: generic
      JWT_SECRET: "1234567890123456789012345678querodelivery"
      PRODUCT_SERVICE_URL: "http://api_product_service:4040"
      NODE_ENV: production
    ports:
      - "3030:3030"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  nginx-gateway:
    build:
      context: ./Nginx
      dockerfile: Dockerfile
    container_name: nginx_gateway
    ports:
      - "8080:8080"
    depends_on:
      - api-product
      - api-user
    restart: on-failure

volumes:
  postgres_data:
  mongodb_data: